name: Deploy to Hostinger

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 

      # Frontend Deployment
      - name: Install Frontend Dependencies
        run: npm install --prefix frontend 

      - name: Build Frontend
        run: npm run build --prefix frontend 

      - name: Deploy Frontend to Hostinger
        uses: appleboy/scp-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          source: "frontend/dist/*"
          target: "/home/u744296712/domains/royalblue-rail-284990.hostingersite.com/temp_deploy"
          strip_components: 2

      - name: Move Frontend files to public_html and cleanup
        uses: appleboy/ssh-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          script: |
            cd /home/u744296712/domains/royalblue-rail-284990.hostingersite.com/
            find public_html -mindepth 1 ! -name 'default.php' ! -name '.well-known' -exec rm -rf {} \;
            mv temp_deploy/* public_html/
            rm -rf temp_deploy

      # Backend Deployment
      - name: Install Backend Dependencies on Runner (for potential caching or pre-flight checks if any)
        run: yarn --cwd backend install --frozen-lockfile

      - name: Create Backend Deployment Directory on Server
        uses: appleboy/ssh-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          script: |
            mkdir -p /home/u744296712/backend_app/
            mkdir -p /home/u744296712/backend_app/uploads

      - name: Deploy Backend Source to Hostinger
        uses: appleboy/scp-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          source: "backend/"
          target: "/home/u744296712/backend_app"
          exclude: |
            node_modules/
            .git/
            dist/
            uploads/

      - name: Setup and Run Backend with PM2
        uses: appleboy/ssh-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          script: |
            cd /home/u744296712/backend_app
            
            # Ensure NVM is installed and source it
            # This attempts to install NVM if not present. For robustness, install NVM manually on the server first.
            if [ ! -d "$HOME/.nvm" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            
            # Install and use Node.js v18
            nvm install 18
            nvm use 18
            # nvm alias default 18 # Optional: consider setting this manually on server if needed for other user sessions
            
            echo "Using Node version:"
            node -v
            echo "Using npm version:"
            npm -v

            # Install PM2 globally using the NVM-managed Node version
            npm install -g pm2
            
            # Install backend dependencies using npm (as per your last change)
            npm install --frozen-lockfile 
            
            # Manage application with PM2 using the NVM-managed Node version
            # The 'npm run start' will execute 'ts-node index.ts' using the Node.js v18 environment
            pm2 stop backend-app || true
            pm2 delete backend-app || true
            pm2 start npm --name backend-app -- run start
            pm2 save # Save current PM2 process list
            # The output of pm2 startup might need to be run manually with sudo if not already configured
            pm2 startup 
            echo "Backend deployment complete. PM2 status:"
            pm2 list 