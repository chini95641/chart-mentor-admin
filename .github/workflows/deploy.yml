name: Deploy to Hostinger

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 

      # Frontend Deployment
      - name: Install Frontend Dependencies
        run: npm install --legacy-peer-deps --prefix frontend 

      - name: Build Frontend
        run: npm run build --prefix frontend 

      - name: Deploy Frontend to Hostinger
        uses: appleboy/scp-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          source: "frontend/dist/*"
          target: "/home/u744296712/domains/royalblue-rail-284990.hostingersite.com/temp_deploy"
          strip_components: 2

      - name: Move Frontend files to public_html and cleanup
        uses: appleboy/ssh-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          script: |
            cd /home/u744296712/domains/royalblue-rail-284990.hostingersite.com/
            find public_html -mindepth 1 ! -name 'default.php' ! -name '.well-known' -exec rm -rf {} \;
            mv temp_deploy/* public_html/
            rm -rf temp_deploy

      # Backend Deployment
      - name: Install Backend Dependencies on Runner (for potential caching or pre-flight checks if any)
        run: yarn --cwd backend install --frozen-lockfile

      - name: Create Backend Deployment Directory on Server
        uses: appleboy/ssh-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          script: |
            mkdir -p /home/u744296712/backend_app/
            mkdir -p /home/u744296712/backend_app/uploads

      - name: Deploy Backend Source to Hostinger
        uses: appleboy/scp-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          source: "backend/"
          target: "/home/u744296712/backend_app"
          exclude: |
            node_modules/
            .git/
            dist/
            uploads/

      - name: Setup and Run Backend with PM2
        uses: appleboy/ssh-action@master
        with:
          host: '156.67.72.178'
          username: 'u744296712'
          password: 'Web@123chart'
          port: '65002'
          script: |
            cd /home/u744296712/backend_app/backend
            
            echo "INFO: Setting up NVM and Node.js..."
            if [ ! -d "$HOME/.nvm" ]; then
              echo "INFO: NVM not found, attempting to install NVM..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 18
            nvm use 18
            echo "INFO: Using Node version: $(node -v)"
            echo "INFO: Using npm version: $(npm -v)"

            echo "INFO: Setting up .env file..."
            if [ -f ".env.example" ]; then
              if [ ! -f ".env" ]; then
                echo "INFO: .env file not found. Copying .env.example to .env"
                cp .env.example .env
                echo "ACTION REQUIRED: .env file created from .env.example. Please review and update it with actual secrets on the server."
              else
                echo "INFO: .env file already exists. Skipping creation from .env.example."
              fi
            else
              echo "WARNING: .env.example not found. Cannot create .env file automatically."
            fi

            echo "INFO: Installing PM2..."
            npm install -g pm2

            echo "INFO: Checking for MongoDB (manual installation not recommended, use Hostinger service or MongoDB Atlas)..."
            if ! command -v mongod &> /dev/null
            then
                echo "INFO: MongoDB (mongod) not found. Attempting to install MongoDB 6.0..."
                echo "WARNING: This step requires sudo and may fail on shared hosting or if the OS is not Ubuntu/Debian."
                echo "WARNING: It is STRONGLY recommended to use Hostinger's provided MongoDB service or a managed database like MongoDB Atlas."
                sudo apt-get update > /dev/null 2>&1 || echo "WARNING: sudo apt-get update failed."
                sudo apt-get install -y gnupg curl > /dev/null 2>&1 || echo "WARNING: sudo apt-get install gnupg curl failed."
                curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor > /dev/null 2>&1 || echo "WARNING: Failed to add MongoDB GPG key."
                echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list > /dev/null 2>&1 || echo "WARNING: Failed to add MongoDB repository."
                sudo apt-get update > /dev/null 2>&1 || echo "WARNING: sudo apt-get update failed (after adding repo)."
                sudo apt-get install -y mongodb-org > /dev/null 2>&1 || echo "WARNING: sudo apt-get install mongodb-org failed."
                sudo systemctl start mongod || echo "WARNING: sudo systemctl start mongod failed."
                sudo systemctl enable mongod || echo "WARNING: sudo systemctl enable mongod failed."
                if ! command -v mongod &> /dev/null; then echo "ERROR: MongoDB installation appears to have failed."; else echo "INFO: MongoDB appears to have been installed. Version: $(mongod --version)"; fi
            else
                echo "INFO: MongoDB (mongod) is already installed. Version: $(mongod --version)"
            fi

            echo "INFO: Installing backend dependencies..."
            npm install --frozen-lockfile
            
            echo "INFO: Starting backend application with PM2..."
            pm2 stop backend-app || true
            pm2 delete backend-app || true
            pm2 start npm --name backend-app -- run start
            pm2 save
            pm2 startup
            echo "INFO: Backend deployment complete. PM2 status:"
            pm2 list 
